#lang racket

(define (switch-door choice revealed)
  (cond ((and (= choice 1) (= revealed 2))
         3)
        ((and (= choice 1) (= revealed 3))
         2)
        ((and (= choice 2) (= revealed 1))
         3)
        ((and (= choice 2) (= revealed 3))
         1)
        ((and (= choice 3) (= revealed 1))
         2)
        ((and (= choice 3) (= revealed 2))
         1)))


(define (reveal-door choice door)
  (let* ((rand (random 2)))
    (cond ((= choice door)
           (cond ((and (= choice 1) (= rand 0))
                  2)
                 ((and (= choice 1) (= rand 1))
                  3)
                 ((and (= choice 2) (= rand 0))
                  1)
                 ((and (= choice 2) (= rand 1))
                  3)
                 ((and (= choice 3) (= rand 0))
                  1)
                 ((and (= choice 3) (= rand 1))
                  2)
                 ))
          (else
           (cond ((and (= choice 1) (= door 2))
                  3)
                 ((and (= choice 1) (= door 3))
                  2)
                 ((and (= choice 2) (= door 1))
                  3)
                 ((and (= choice 2) (= door 3))
                  1)
                 ((and (= choice 3) (= door 1))
                  2)
                 ((and (= choice 3) (= door 2))
                  1))))))

(define (play-game-switch i n wins losses)
  (if (= i n)
      wins
      (let* ((door (+ (random 3) 1))
             (choice (+ (random 3) 1))
             (revealed (reveal-door choice door))
             (switch (switch-door choice revealed)))
                     (if (= door switch)
                         (play-game-switch (+ i 1) n (+ wins 1) losses)
                         (play-game-switch (+ i 1) n wins (+ losses 1)))
                     )
             )
        )

(define (play-game i n wins losses)
  (if (= i n)
      wins
      (let* ((door (+ (random 3) 1))
             (choice (+ (random 3) 1))
             (revealed (reveal-door choice door)))
                     (if (= door choice)
                         (play-game (+ i 1) n (+ wins 1) losses)
                         (play-game (+ i 1) n wins (+ losses 1)))
                     )
             )
        )

(play-game 0 100000 0 0)
(play-game-switch 0 100000 0 0)